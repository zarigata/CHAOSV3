// ==========================================================
// ‚ö° C.H.A.O.S DATABASE SCHEMA ‚ö°
// ==========================================================
// - DATABASE MODELS FOR MSN-INSPIRED CHAT APPLICATION
// - HANDLES USERS, MESSAGES, CHANNELS, HUBS, PRESENCE
// - BUILT FOR SCALABILITY AND SECURITY
// ==========================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================================
// üë§ USER MODEL - CENTRAL ENTITY
// ==========================================================
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  passwordHash  String
  displayName   String?
  avatarUrl     String?
  statusMessage String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // ‚ö° ENUM FIELD FOR USER STATUS
  status        UserStatus @default(OFFLINE)

  // ‚ö° RELATIONS - DEFINE CONNECTIONS BETWEEN ENTITIES
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
  memberships      HubMember[]
  contacts         Contact[]       @relation("UserContacts")
  contactOf        Contact[]       @relation("ContactOf")
  sessions         UserSession[]
}

// ==========================================================
// üîë USER SESSION - HANDLE AUTH TOKENS & PRESENCE
// ==========================================================
model UserSession {
  id            String    @id @default(uuid())
  userId        String
  refreshToken  String
  expiresAt     DateTime
  lastActiveAt  DateTime  @default(now())
  userAgent     String?
  ipAddress     String?

  // ‚ö° RELATIONS - MAP TO USER
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

// ==========================================================
// üìù MESSAGE MODEL - STORE ALL COMMUNICATIONS
// ==========================================================
model Message {
  id            String    @id @default(uuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // ‚ö° RELATIONS - SENDER AND RECEIVER
  senderId      String
  sender        User      @relation("SentMessages", fields: [senderId], references: [id])

  // ‚ö° OPTIONAL RECIPIENT (DIRECT MESSAGE)
  recipientId   String?
  recipient     User?     @relation("ReceivedMessages", fields: [recipientId], references: [id])

  // ‚ö° OPTIONAL CHANNEL (GROUP MESSAGE)
  channelId     String?
  channel       Channel?  @relation(fields: [channelId], references: [id])
  
  // ‚ö° MESSAGE TYPE AND STATUS
  type          MessageType @default(TEXT)
  isEncrypted   Boolean  @default(false)
  isEdited      Boolean  @default(false)
  isDeleted     Boolean  @default(false)
  
  // ‚ö° OPTIONAL REPLY REFERENCE
  replyToId     String?
  replyTo       Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies       Message[] @relation("MessageReplies")

  @@index([senderId])
  @@index([recipientId])
  @@index([channelId])
}

// ==========================================================
// üë• CONTACT MODEL - MSN-STYLE FRIEND CONNECTIONS
// ==========================================================
model Contact {
  id            String    @id @default(uuid())
  userId        String
  contactId     String
  nickname      String?
  createdAt     DateTime  @default(now())
  groupName     String?   @default("Friends")
  
  // ‚ö° RELATIONS - USER CONNECTIONS
  user          User      @relation("UserContacts", fields: [userId], references: [id])
  contact       User      @relation("ContactOf", fields: [contactId], references: [id])
  
  @@unique([userId, contactId])
  @@index([userId])
  @@index([contactId])
}

// ==========================================================
// üè† HUB MODEL - DISCORD-STYLE SERVERS
// ==========================================================
model Hub {
  id            String    @id @default(uuid())
  name          String
  description   String?
  iconUrl       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ownerId       String
  
  // ‚ö° RELATIONS - CHANNELS AND MEMBERS
  channels      Channel[]
  members       HubMember[]
  
  @@index([ownerId])
}

// ==========================================================
// üì¢ CHANNEL MODEL - COMMUNICATION THREADS WITHIN HUBS
// ==========================================================
model Channel {
  id            String    @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isPrivate     Boolean   @default(false)
  
  // ‚ö° RELATIONS - PARENT HUB AND MESSAGES 
  hubId         String
  hub           Hub       @relation(fields: [hubId], references: [id])
  messages      Message[]
  
  @@unique([hubId, name])
  @@index([hubId])
}

// ==========================================================
// üßë‚Äçüíº HUB MEMBER - USER MEMBERSHIPS WITH ROLES
// ==========================================================
model HubMember {
  id            String    @id @default(uuid())
  hubId         String
  userId        String
  role          MemberRole @default(MEMBER)
  nickname      String?
  joinedAt      DateTime  @default(now())
  
  // ‚ö° RELATIONS - USER AND HUB
  hub           Hub       @relation(fields: [hubId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  
  @@unique([hubId, userId])
  @@index([hubId])
  @@index([userId])
}

// ==========================================================
// üìä ENUMS - TYPE DEFINITIONS FOR DATABASE
// ==========================================================
enum UserStatus {
  ONLINE
  AWAY
  BUSY
  INVISIBLE
  OFFLINE
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  AUDIO
  VIDEO
}

enum MemberRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}
